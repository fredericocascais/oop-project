@startuml
skinparam classAttributeIconSize 0

package graph {
  interface IGraph {
    + getNode(int) : Node
    + getNodeList() : Node[]
    + addEdgeToList(int, int) : void
    + addEdgeToList(int, int, double) : void
    + createRandomGraph() : void
    + createRandomGraph(int) : void
    + createGivenGraph(InputParameters) : void
    + generateRandomHamiltonianPath() : ArrayList<Integer>
  }

  abstract class AbstractGraph implements IGraph{
    # n_nodes: int
    # max_edges: int
    # adjList: Node[]

    + AbstractGraph(n_nodes: int)
    + getNode(id: int): Node
    + getNodeList(): Node[]
    + addEdgeToList(n1: int, n2: int)
    + addEdgeToList(n1: int, n2: int, weight: double)
    + generateRandomHamiltonianPath(): ArrayList<Integer>
    + getMaxEdges(): int
    + getTotalNodes(): int
  }

  interface IEdge {
    +getDestination(): int
    +getId(): int
  }

  class Edge implements IEdge {
    -destination: int
    -weight: double
    -id: int
    {static} - count: int

    +Edge(dest: int, weight: double)
    +getDestination(): int
    +getId(): int
    +getWeight(): double
    +getReverseEdge(): Edge
    +toString(): String
  }

  class Node {
    -id: int
    -edges: List<Edge>
    -linkedNodes: List<Integer>

    + Node(id: int)
    + addEdgeToNode(dest: int): void
    + addEdgeToNode(dest: int, weight: double): void
    + getEdges(): List<Edge>
    + getEdgeById(edgeId: int): Edge
    + getLinkedNodes(): List<Integer>
    + getId(): int
    + toString(): String
  }

  class HamiltonianCycle {
    -totalWeight: int
    -path: ArrayList<Integer>

    +HamiltonianCycle(totalWeight: int, path: ArrayList<Integer>)
    +getPath(): ArrayList<Integer>
    +getTotalWeight(): int
    +toString(): String
    +equals(obj: Object): boolean
    +compareTo(o: HamiltonianCycle): int
  }

  class WeightedGraph extends AbstractGraph {
    - graph: WeightedGraph
    {static} - totalWeight: double

    -WeightedGraph(totalNodes: int)
    {static} + getGraph(int): WeightedGraph
    {static} + getGraph(): WeightedGraph
    + getTotalWeight(): double
    + addEdgeToList(int, int, double): void
    + addEdgeToList(int, int): void
    + createRandomGraph(int): void
    + createGivenGraph(InputParameters): void
    + printGraph(): void
    + createRandomGraph(): void
  }

  class Graph extends AbstractGraph {
    + Graph(n_nodes: int)
    + addEdgeToList(n1: int, n2: int)
    + addEdgeToList(n1: int, n2: int, weight: double)
    + createGivenGraph(parameters: InputParameters)
    + createRandomGraph()
    + createRandomGraph(max_weight: int)
  }

  AbstractGraph "1" --* "1..*" Node
  AbstractGraph "1" --* "1..*" Edge
  Edge "1..*" --> "1" Node : Destination
  HamiltonianCycle "1..*" --o "1..*" Node: Path
  Node "1..*" -- "1..*" Edge: Linked
  Node "1..*" -- "1..*" Node: Adjacent
}

@enduml